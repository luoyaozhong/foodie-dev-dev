profiles 多环境数据源配置梳理：
1. 数据源配置
    1.1 url根据自身情况去修改为 localhost或者内网IP（集群或者分布式系统，一定要使用内网IP）
    1.2 密码 123456 改为你自己的密码

2. mybatis日志打印
    dev 可以打印
    prod 无需打印

3. 图片保存目录 和 图片服务请求路径配置
    /workspaces/images/foodie/faces
    http://120.77.28.29:8088/foodie-dev-api/foodie/faces

4. 从支付中心回调天天吃货后端服务的回调地址
    http://api.z.mukewang.com/foodie-dev-api/orders/notifyMerchantOrderPaid


----------发布服务器----------
打包方式：
1. jar
    服务化的概念，后续接触springcloud，所有的服务打包都是以jar的形式存在的。
2. war
    应用程序的概念，也可以向外提供服务和接口。

<!-- 打包war [1]-->
 <packaging>war</packaging>

<!-- 打包war [2] 移除自带内置tomcat -->
<exclusions>
    <exclusion>
        <artifactId>spring-boot-starter-tomcat</artifactId>
        <groupId>org.springframework.boot</groupId>
    </exclusion>
</exclusions>

<!-- 打包war [3] 添加依赖 -->
<dependency>
    <groupId>javax.servlet</groupId>
    <artifactId>javax.servlet-api</artifactId>
    <scope>provided</scope>
</dependency>

<!-- 打包war [4] 增加war的启动类 -->
public class WarStarterApplication extends SpringBootServletInitializer {

    @Override
    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {
        //指向Application这个springboot启动类
        return builder.sources(Application.class);
    }

}



----------本地跑项目----------
<!-- 打包jar [1]-->
 <packaging>jar</packaging>

 <!-- 打包war [2] 不要移除自带内置tomcat -->
 <!--<exclusions>
     <exclusion>
         <artifactId>spring-boot-starter-tomcat</artifactId>
         <groupId>org.springframework.boot</groupId>
     </exclusion>
 </exclusions>-->